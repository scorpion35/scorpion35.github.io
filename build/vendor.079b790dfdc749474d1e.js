/*! For license information please see vendor.079b790dfdc749474d1e.js.LICENSE.txt */
(()=>{"use strict";var t={240:(t,e,n)=>{n.d(e,{fi:()=>y,kZ:()=>b});var i=n(400),o=n(163),r=n(57),s=n(556);var a=n(333),l=n(63),c=n(252),u=n(611);function f(t,e,n){void 0===n&&(n=!1);var f,d,h=(0,c.Z)(e),p=(0,i.Z)(t),g=(0,s.Re)(e),m={scrollLeft:0,scrollTop:0},v={x:0,y:0};return(g||!g&&!n)&&(("body"!==(0,a.Z)(e)||(0,u.Z)(h))&&(m=(f=e)!==(0,r.Z)(f)&&(0,s.Re)(f)?{scrollLeft:(d=f).scrollLeft,scrollTop:d.scrollTop}:(0,o.Z)(f)),(0,s.Re)(e)?((v=(0,i.Z)(e)).x+=e.clientLeft,v.y+=e.clientTop):h&&(v.x=(0,l.Z)(h))),{x:p.left+m.scrollLeft-v.x,y:p.top+m.scrollTop-v.y,width:p.width,height:p.height}}var d=n(583),h=n(624),p=n(779),g=n(701);function m(t){var e=new Map,n=new Set,i=[];function o(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var i=e.get(t);i&&o(i)}})),i.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||o(t)})),i}var v={placement:"bottom",modifiers:[],strategy:"absolute"};function _(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function b(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,i=void 0===n?[]:n,o=e.defaultOptions,r=void 0===o?v:o;return function(t,e,n){void 0===n&&(n=r);var o,a,l={placement:"bottom",orderedModifiers:[],options:Object.assign(Object.assign({},v),r),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},c=[],u=!1,b={state:l,setOptions:function(n){y(),l.options=Object.assign(Object.assign(Object.assign({},r),l.options),n),l.scrollParents={reference:(0,s.kK)(t)?(0,h.Z)(t):t.contextElement?(0,h.Z)(t.contextElement):[],popper:(0,h.Z)(e)};var o=function(t){var e=m(t);return g.xs.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}(function(t){var e=t.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign(Object.assign(Object.assign({},n),e),{},{options:Object.assign(Object.assign({},n.options),e.options),data:Object.assign(Object.assign({},n.data),e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}([].concat(i,l.options.modifiers)));return l.orderedModifiers=o.filter((function(t){return t.enabled})),l.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,i=void 0===n?{}:n,o=t.effect;if("function"==typeof o){var r=o({state:l,name:e,instance:b,options:i}),s=function(){};c.push(r||s)}})),b.update()},forceUpdate:function(){if(!u){var t=l.elements,e=t.reference,n=t.popper;if(_(e,n)){l.rects={reference:f(e,(0,p.Z)(n),"fixed"===l.options.strategy),popper:(0,d.Z)(n)},l.reset=!1,l.placement=l.options.placement,l.orderedModifiers.forEach((function(t){return l.modifiersData[t.name]=Object.assign({},t.data)}));for(var i=0;i<l.orderedModifiers.length;i++)if(!0!==l.reset){var o=l.orderedModifiers[i],r=o.fn,s=o.options,a=void 0===s?{}:s,c=o.name;"function"==typeof r&&(l=r({state:l,options:a,name:c,instance:b})||l)}else l.reset=!1,i=-1}}},update:(o=function(){return new Promise((function(t){b.forceUpdate(),t(l)}))},function(){return a||(a=new Promise((function(t){Promise.resolve().then((function(){a=void 0,t(o())}))}))),a}),destroy:function(){y(),u=!0}};if(!_(t,e))return b;function y(){c.forEach((function(t){return t()})),c=[]}return b.setOptions(n).then((function(t){!u&&n.onFirstUpdate&&n.onFirstUpdate(t)})),b}}var y=b()},985:(t,e,n)=>{n.d(e,{Z:()=>o});var i=n(556);function o(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&(0,i.Zq)(n)){var o=e;do{if(o&&t.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}},400:(t,e,n)=>{function i(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height,top:e.top,right:e.right,bottom:e.bottom,left:e.left,x:e.left,y:e.top}}n.d(e,{Z:()=>i})},62:(t,e,n)=>{n.d(e,{Z:()=>o});var i=n(57);function o(t){return(0,i.Z)(t).getComputedStyle(t)}},252:(t,e,n)=>{n.d(e,{Z:()=>o});var i=n(556);function o(t){return(((0,i.kK)(t)?t.ownerDocument:t.document)||window.document).documentElement}},583:(t,e,n)=>{function i(t){return{x:t.offsetLeft,y:t.offsetTop,width:t.offsetWidth,height:t.offsetHeight}}n.d(e,{Z:()=>i})},333:(t,e,n)=>{function i(t){return t?(t.nodeName||"").toLowerCase():null}n.d(e,{Z:()=>i})},779:(t,e,n)=>{n.d(e,{Z:()=>f});var i=n(57),o=n(333),r=n(62),s=n(556);function a(t){return["table","td","th"].indexOf((0,o.Z)(t))>=0}var l=n(923),c=n(252);function u(t){if(!(0,s.Re)(t)||"fixed"===(0,r.Z)(t).position)return null;var e=t.offsetParent;if(e){var n=(0,c.Z)(e);if("body"===(0,o.Z)(e)&&"static"===(0,r.Z)(e).position&&"static"!==(0,r.Z)(n).position)return n}return e}function f(t){for(var e=(0,i.Z)(t),n=u(t);n&&a(n)&&"static"===(0,r.Z)(n).position;)n=u(n);return n&&"body"===(0,o.Z)(n)&&"static"===(0,r.Z)(n).position?e:n||function(t){for(var e=(0,l.Z)(t);(0,s.Re)(e)&&["html","body"].indexOf((0,o.Z)(e))<0;){var n=(0,r.Z)(e);if("none"!==n.transform||"none"!==n.perspective||n.willChange&&"auto"!==n.willChange)return e;e=e.parentNode}return null}(t)||e}},923:(t,e,n)=>{n.d(e,{Z:()=>r});var i=n(333),o=n(252);function r(t){return"html"===(0,i.Z)(t)?t:t.assignedSlot||t.parentNode||t.host||(0,o.Z)(t)}},57:(t,e,n)=>{function i(t){if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}n.d(e,{Z:()=>i})},163:(t,e,n)=>{n.d(e,{Z:()=>o});var i=n(57);function o(t){var e=(0,i.Z)(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}},63:(t,e,n)=>{n.d(e,{Z:()=>s});var i=n(400),o=n(252),r=n(163);function s(t){return(0,i.Z)((0,o.Z)(t)).left+(0,r.Z)(t).scrollLeft}},556:(t,e,n)=>{n.d(e,{kK:()=>o,Re:()=>r,Zq:()=>s});var i=n(57);function o(t){return t instanceof(0,i.Z)(t).Element||t instanceof Element}function r(t){return t instanceof(0,i.Z)(t).HTMLElement||t instanceof HTMLElement}function s(t){return t instanceof(0,i.Z)(t).ShadowRoot||t instanceof ShadowRoot}},611:(t,e,n)=>{n.d(e,{Z:()=>o});var i=n(62);function o(t){var e=(0,i.Z)(t),n=e.overflow,o=e.overflowX,r=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+o)}},624:(t,e,n)=>{n.d(e,{Z:()=>c});var i=n(923),o=n(611),r=n(333),s=n(556);function a(t){return["html","body","#document"].indexOf((0,r.Z)(t))>=0?t.ownerDocument.body:(0,s.Re)(t)&&(0,o.Z)(t)?t:a((0,i.Z)(t))}var l=n(57);function c(t,e){void 0===e&&(e=[]);var n=a(t),s="body"===(0,r.Z)(n),u=(0,l.Z)(n),f=s?[u].concat(u.visualViewport||[],(0,o.Z)(n)?n:[]):n,d=e.concat(f);return s?d:d.concat(c((0,i.Z)(f)))}},701:(t,e,n)=>{n.d(e,{we:()=>i,I:()=>o,F2:()=>r,t$:()=>s,d7:()=>a,mv:()=>l,BL:()=>c,ut:()=>u,zV:()=>f,Pj:()=>d,k5:()=>h,YP:()=>p,bw:()=>g,Ct:()=>m,N7:()=>v,ij:()=>_,r5:()=>b,XM:()=>y,DH:()=>w,wX:()=>E,iv:()=>T,cW:()=>k,MS:()=>O,xs:()=>L});var i="top",o="bottom",r="right",s="left",a="auto",l=[i,o,r,s],c="start",u="end",f="clippingParents",d="viewport",h="popper",p="reference",g=l.reduce((function(t,e){return t.concat([e+"-"+c,e+"-"+u])}),[]),m=[].concat(l,[a]).reduce((function(t,e){return t.concat([e,e+"-"+c,e+"-"+u])}),[]),v="beforeRead",_="read",b="afterRead",y="beforeMain",w="main",E="afterMain",T="beforeWrite",k="write",O="afterWrite",L=[v,_,b,y,w,E,T,k,O]},704:(t,e,n)=>{n.r(e),n.d(e,{afterMain:()=>i.wX,afterRead:()=>i.r5,afterWrite:()=>i.MS,applyStyles:()=>o.Z,arrow:()=>r.Z,auto:()=>i.d7,basePlacements:()=>i.mv,beforeMain:()=>i.XM,beforeRead:()=>i.N7,beforeWrite:()=>i.iv,bottom:()=>i.I,clippingParents:()=>i.zV,computeStyles:()=>s.Z,createPopper:()=>g.fi,createPopperBase:()=>h.fi,createPopperLite:()=>v,detectOverflow:()=>p.Z,end:()=>i.ut,eventListeners:()=>a.Z,flip:()=>l.Z,hide:()=>c.Z,left:()=>i.t$,main:()=>i.DH,modifierPhases:()=>i.xs,offset:()=>u.Z,placements:()=>i.Ct,popper:()=>i.k5,popperGenerator:()=>h.kZ,popperOffsets:()=>f.Z,preventOverflow:()=>d.Z,read:()=>i.ij,reference:()=>i.YP,right:()=>i.F2,start:()=>i.BL,top:()=>i.we,variationPlacements:()=>i.bw,viewport:()=>i.Pj,write:()=>i.cW});var i=n(701),o=n(824),r=n(896),s=n(531),a=n(372),l=n(228),c=n(892),u=n(122),f=n(421),d=n(920),h=n(240),p=n(966),g=n(804),m=[a.Z,f.Z,s.Z,o.Z],v=(0,h.kZ)({defaultModifiers:m})},824:(t,e,n)=>{n.d(e,{Z:()=>r});var i=n(333),o=n(556);const r={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},r=e.attributes[t]||{},s=e.elements[t];(0,o.Re)(s)&&(0,i.Z)(s)&&(Object.assign(s.style,n),Object.keys(r).forEach((function(t){var e=r[t];!1===e?s.removeAttribute(t):s.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var r=e.elements[t],s=e.attributes[t]||{},a=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});(0,o.Re)(r)&&(0,i.Z)(r)&&(Object.assign(r.style,a),Object.keys(s).forEach((function(t){r.removeAttribute(t)})))}))}},requires:["computeStyles"]}},896:(t,e,n)=>{n.d(e,{Z:()=>d});var i=n(206),o=n(583),r=n(985),s=n(779),a=n(516),l=n(711),c=n(293),u=n(706),f=n(701);const d={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,r=t.name,c=n.elements.arrow,u=n.modifiersData.popperOffsets,d=(0,i.Z)(n.placement),h=(0,a.Z)(d),p=[f.t$,f.F2].indexOf(d)>=0?"height":"width";if(c&&u){var g=n.modifiersData[r+"#persistent"].padding,m=(0,o.Z)(c),v="y"===h?f.we:f.t$,_="y"===h?f.I:f.F2,b=n.rects.reference[p]+n.rects.reference[h]-u[h]-n.rects.popper[p],y=u[h]-n.rects.reference[h],w=(0,s.Z)(c),E=w?"y"===h?w.clientHeight||0:w.clientWidth||0:0,T=b/2-y/2,k=g[v],O=E-m[p]-g[_],L=E/2-m[p]/2+T,A=(0,l.Z)(k,L,O),C=h;n.modifiersData[r]=((e={})[C]=A,e.centerOffset=A-L,e)}},effect:function(t){var e=t.state,n=t.options,i=t.name,o=n.element,s=void 0===o?"[data-popper-arrow]":o,a=n.padding,l=void 0===a?0:a;null!=s&&("string"!=typeof s||(s=e.elements.popper.querySelector(s)))&&(0,r.Z)(e.elements.popper,s)&&(e.elements.arrow=s,e.modifiersData[i+"#persistent"]={padding:(0,c.Z)("number"!=typeof l?l:(0,u.Z)(l,f.mv))})},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},531:(t,e,n)=>{n.d(e,{Z:()=>u});var i=n(701),o=n(779),r=n(57),s=n(252),a=n(206),l={top:"auto",right:"auto",bottom:"auto",left:"auto"};function c(t){var e,n=t.popper,a=t.popperRect,c=t.placement,u=t.offsets,f=t.position,d=t.gpuAcceleration,h=t.adaptive,p=t.roundOffsets?function(t){var e=t.x,n=t.y,i=window.devicePixelRatio||1;return{x:Math.round(e*i)/i||0,y:Math.round(n*i)/i||0}}(u):u,g=p.x,m=void 0===g?0:g,v=p.y,_=void 0===v?0:v,b=u.hasOwnProperty("x"),y=u.hasOwnProperty("y"),w=i.t$,E=i.we,T=window;if(h){var k=(0,o.Z)(n);k===(0,r.Z)(n)&&(k=(0,s.Z)(n)),c===i.we&&(E=i.I,_-=k.clientHeight-a.height,_*=d?1:-1),c===i.t$&&(w=i.F2,m-=k.clientWidth-a.width,m*=d?1:-1)}var O,L=Object.assign({position:f},h&&l);return d?Object.assign(Object.assign({},L),{},((O={})[E]=y?"0":"",O[w]=b?"0":"",O.transform=(T.devicePixelRatio||1)<2?"translate("+m+"px, "+_+"px)":"translate3d("+m+"px, "+_+"px, 0)",O)):Object.assign(Object.assign({},L),{},((e={})[E]=y?_+"px":"",e[w]=b?m+"px":"",e.transform="",e))}const u={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,i=n.gpuAcceleration,o=void 0===i||i,r=n.adaptive,s=void 0===r||r,l=n.roundOffsets,u=void 0===l||l,f={placement:(0,a.Z)(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:o};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign(Object.assign({},e.styles.popper),c(Object.assign(Object.assign({},f),{},{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:s,roundOffsets:u})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign(Object.assign({},e.styles.arrow),c(Object.assign(Object.assign({},f),{},{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),e.attributes.popper=Object.assign(Object.assign({},e.attributes.popper),{},{"data-popper-placement":e.placement})},data:{}}},372:(t,e,n)=>{n.d(e,{Z:()=>r});var i=n(57),o={passive:!0};const r={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,r=t.options,s=r.scroll,a=void 0===s||s,l=r.resize,c=void 0===l||l,u=(0,i.Z)(e.elements.popper),f=[].concat(e.scrollParents.reference,e.scrollParents.popper);return a&&f.forEach((function(t){t.addEventListener("scroll",n.update,o)})),c&&u.addEventListener("resize",n.update,o),function(){a&&f.forEach((function(t){t.removeEventListener("scroll",n.update,o)})),c&&u.removeEventListener("resize",n.update,o)}},data:{}}},228:(t,e,n)=>{n.d(e,{Z:()=>f});var i={left:"right",right:"left",bottom:"top",top:"bottom"};function o(t){return t.replace(/left|right|bottom|top/g,(function(t){return i[t]}))}var r=n(206),s={start:"end",end:"start"};function a(t){return t.replace(/start|end/g,(function(t){return s[t]}))}var l=n(966),c=n(943),u=n(701);const f={name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,i=t.name;if(!e.modifiersData[i]._skip){for(var s=n.mainAxis,f=void 0===s||s,d=n.altAxis,h=void 0===d||d,p=n.fallbackPlacements,g=n.padding,m=n.boundary,v=n.rootBoundary,_=n.altBoundary,b=n.flipVariations,y=void 0===b||b,w=n.allowedAutoPlacements,E=e.options.placement,T=(0,r.Z)(E),k=p||(T===E||!y?[o(E)]:function(t){if((0,r.Z)(t)===u.d7)return[];var e=o(t);return[a(t),e,a(e)]}(E)),O=[E].concat(k).reduce((function(t,n){return t.concat((0,r.Z)(n)===u.d7?function(t,e){void 0===e&&(e={});var n=e,i=n.placement,o=n.boundary,s=n.rootBoundary,a=n.padding,f=n.flipVariations,d=n.allowedAutoPlacements,h=void 0===d?u.Ct:d,p=(0,c.Z)(i),g=p?f?u.bw:u.bw.filter((function(t){return(0,c.Z)(t)===p})):u.mv,m=g.filter((function(t){return h.indexOf(t)>=0}));0===m.length&&(m=g);var v=m.reduce((function(e,n){return e[n]=(0,l.Z)(t,{placement:n,boundary:o,rootBoundary:s,padding:a})[(0,r.Z)(n)],e}),{});return Object.keys(v).sort((function(t,e){return v[t]-v[e]}))}(e,{placement:n,boundary:m,rootBoundary:v,padding:g,flipVariations:y,allowedAutoPlacements:w}):n)}),[]),L=e.rects.reference,A=e.rects.popper,C=new Map,Z=!0,D=O[0],x=0;x<O.length;x++){var j=O[x],S=(0,r.Z)(j),N=(0,c.Z)(j)===u.BL,I=[u.we,u.I].indexOf(S)>=0,P=I?"width":"height",M=(0,l.Z)(e,{placement:j,boundary:m,rootBoundary:v,altBoundary:_,padding:g}),B=I?N?u.F2:u.t$:N?u.I:u.we;L[P]>A[P]&&(B=o(B));var R=o(B),H=[];if(f&&H.push(M[S]<=0),h&&H.push(M[B]<=0,M[R]<=0),H.every((function(t){return t}))){D=j,Z=!1;break}C.set(j,H)}if(Z)for(var W=function(t){var e=O.find((function(e){var n=C.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return D=e,"break"},F=y?3:1;F>0;F--){if("break"===W(F))break}e.placement!==D&&(e.modifiersData[i]._skip=!0,e.placement=D,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},892:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(701),o=n(966);function r(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function s(t){return[i.we,i.F2,i.I,i.t$].some((function(e){return t[e]>=0}))}const a={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,i=e.rects.reference,a=e.rects.popper,l=e.modifiersData.preventOverflow,c=(0,o.Z)(e,{elementContext:"reference"}),u=(0,o.Z)(e,{altBoundary:!0}),f=r(c,i),d=r(u,a,l),h=s(f),p=s(d);e.modifiersData[n]={referenceClippingOffsets:f,popperEscapeOffsets:d,isReferenceHidden:h,hasPopperEscaped:p},e.attributes.popper=Object.assign(Object.assign({},e.attributes.popper),{},{"data-popper-reference-hidden":h,"data-popper-escaped":p})}}},122:(t,e,n)=>{n.d(e,{Z:()=>r});var i=n(206),o=n(701);const r={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,r=t.name,s=n.offset,a=void 0===s?[0,0]:s,l=o.Ct.reduce((function(t,n){return t[n]=function(t,e,n){var r=(0,i.Z)(t),s=[o.t$,o.we].indexOf(r)>=0?-1:1,a="function"==typeof n?n(Object.assign(Object.assign({},e),{},{placement:t})):n,l=a[0],c=a[1];return l=l||0,c=(c||0)*s,[o.t$,o.F2].indexOf(r)>=0?{x:c,y:l}:{x:l,y:c}}(n,e.rects,a),t}),{}),c=l[e.placement],u=c.x,f=c.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=u,e.modifiersData.popperOffsets.y+=f),e.modifiersData[r]=l}}},421:(t,e,n)=>{n.d(e,{Z:()=>o});var i=n(581);const o={name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=(0,i.Z)({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}}},920:(t,e,n)=>{n.d(e,{Z:()=>d});var i=n(701),o=n(206),r=n(516);var s=n(711),a=n(583),l=n(779),c=n(966),u=n(943),f=n(743);const d={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,d=t.name,h=n.mainAxis,p=void 0===h||h,g=n.altAxis,m=void 0!==g&&g,v=n.boundary,_=n.rootBoundary,b=n.altBoundary,y=n.padding,w=n.tether,E=void 0===w||w,T=n.tetherOffset,k=void 0===T?0:T,O=(0,c.Z)(e,{boundary:v,rootBoundary:_,padding:y,altBoundary:b}),L=(0,o.Z)(e.placement),A=(0,u.Z)(e.placement),C=!A,Z=(0,r.Z)(L),D="x"===Z?"y":"x",x=e.modifiersData.popperOffsets,j=e.rects.reference,S=e.rects.popper,N="function"==typeof k?k(Object.assign(Object.assign({},e.rects),{},{placement:e.placement})):k,I={x:0,y:0};if(x){if(p){var P="y"===Z?i.we:i.t$,M="y"===Z?i.I:i.F2,B="y"===Z?"height":"width",R=x[Z],H=x[Z]+O[P],W=x[Z]-O[M],F=E?-S[B]/2:0,K=A===i.BL?j[B]:S[B],Q=A===i.BL?-S[B]:-j[B],U=e.elements.arrow,Y=E&&U?(0,a.Z)(U):{width:0,height:0},q=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:(0,f.Z)(),z=q[P],X=q[M],V=(0,s.Z)(0,j[B],Y[B]),$=C?j[B]/2-F-V-z-N:K-V-z-N,G=C?-j[B]/2+F+V+X+N:Q+V+X+N,J=e.elements.arrow&&(0,l.Z)(e.elements.arrow),tt=J?"y"===Z?J.clientTop||0:J.clientLeft||0:0,et=e.modifiersData.offset?e.modifiersData.offset[e.placement][Z]:0,nt=x[Z]+$-et-tt,it=x[Z]+G-et,ot=(0,s.Z)(E?Math.min(H,nt):H,R,E?Math.max(W,it):W);x[Z]=ot,I[Z]=ot-R}if(m){var rt="x"===Z?i.we:i.t$,st="x"===Z?i.I:i.F2,at=x[D],lt=at+O[rt],ct=at-O[st],ut=(0,s.Z)(lt,at,ct);x[D]=ut,I[D]=ut-at}e.modifiersData[d]=I}},requiresIfExists:["offset"]}},804:(t,e,n)=>{n.d(e,{fi:()=>p});var i=n(240),o=n(372),r=n(421),s=n(531),a=n(824),l=n(122),c=n(228),u=n(920),f=n(896),d=n(892),h=[o.Z,r.Z,s.Z,a.Z,l.Z,c.Z,u.Z,f.Z,d.Z],p=(0,i.kZ)({defaultModifiers:h})},581:(t,e,n)=>{n.d(e,{Z:()=>a});var i=n(206),o=n(943),r=n(516),s=n(701);function a(t){var e,n=t.reference,a=t.element,l=t.placement,c=l?(0,i.Z)(l):null,u=l?(0,o.Z)(l):null,f=n.x+n.width/2-a.width/2,d=n.y+n.height/2-a.height/2;switch(c){case s.we:e={x:f,y:n.y-a.height};break;case s.I:e={x:f,y:n.y+n.height};break;case s.F2:e={x:n.x+n.width,y:d};break;case s.t$:e={x:n.x-a.width,y:d};break;default:e={x:n.x,y:n.y}}var h=c?(0,r.Z)(c):null;if(null!=h){var p="y"===h?"height":"width";switch(u){case s.BL:e[h]=e[h]-(n[p]/2-a[p]/2);break;case s.ut:e[h]=e[h]+(n[p]/2-a[p]/2)}}return e}},966:(t,e,n)=>{n.d(e,{Z:()=>E});var i=n(400),o=n(701),r=n(57),s=n(252),a=n(63);var l=n(62),c=n(163);var u=n(624),f=n(779),d=n(556),h=n(923),p=n(985),g=n(333);function m(t){return Object.assign(Object.assign({},t),{},{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function v(t,e){return e===o.Pj?m(function(t){var e=(0,r.Z)(t),n=(0,s.Z)(t),i=e.visualViewport,o=n.clientWidth,l=n.clientHeight,c=0,u=0;return i&&(o=i.width,l=i.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(c=i.offsetLeft,u=i.offsetTop)),{width:o,height:l,x:c+(0,a.Z)(t),y:u}}(t)):(0,d.Re)(e)?function(t){var e=(0,i.Z)(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):m(function(t){var e=(0,s.Z)(t),n=(0,c.Z)(t),i=t.ownerDocument.body,o=Math.max(e.scrollWidth,e.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),r=Math.max(e.scrollHeight,e.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),u=-n.scrollLeft+(0,a.Z)(t),f=-n.scrollTop;return"rtl"===(0,l.Z)(i||e).direction&&(u+=Math.max(e.clientWidth,i?i.clientWidth:0)-o),{width:o,height:r,x:u,y:f}}((0,s.Z)(t)))}function _(t,e,n){var i="clippingParents"===e?function(t){var e=(0,u.Z)((0,h.Z)(t)),n=["absolute","fixed"].indexOf((0,l.Z)(t).position)>=0&&(0,d.Re)(t)?(0,f.Z)(t):t;return(0,d.kK)(n)?e.filter((function(t){return(0,d.kK)(t)&&(0,p.Z)(t,n)&&"body"!==(0,g.Z)(t)})):[]}(t):[].concat(e),o=[].concat(i,[n]),r=o[0],s=o.reduce((function(e,n){var i=v(t,n);return e.top=Math.max(i.top,e.top),e.right=Math.min(i.right,e.right),e.bottom=Math.min(i.bottom,e.bottom),e.left=Math.max(i.left,e.left),e}),v(t,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}var b=n(581),y=n(293),w=n(706);function E(t,e){void 0===e&&(e={});var n=e,r=n.placement,a=void 0===r?t.placement:r,l=n.boundary,c=void 0===l?o.zV:l,u=n.rootBoundary,f=void 0===u?o.Pj:u,h=n.elementContext,p=void 0===h?o.k5:h,g=n.altBoundary,v=void 0!==g&&g,E=n.padding,T=void 0===E?0:E,k=(0,y.Z)("number"!=typeof T?T:(0,w.Z)(T,o.mv)),O=p===o.k5?o.YP:o.k5,L=t.elements.reference,A=t.rects.popper,C=t.elements[v?O:p],Z=_((0,d.kK)(C)?C:C.contextElement||(0,s.Z)(t.elements.popper),c,f),D=(0,i.Z)(L),x=(0,b.Z)({reference:D,element:A,strategy:"absolute",placement:a}),j=m(Object.assign(Object.assign({},A),x)),S=p===o.k5?j:D,N={top:Z.top-S.top+k.top,bottom:S.bottom-Z.bottom+k.bottom,left:Z.left-S.left+k.left,right:S.right-Z.right+k.right},I=t.modifiersData.offset;if(p===o.k5&&I){var P=I[a];Object.keys(N).forEach((function(t){var e=[o.F2,o.I].indexOf(t)>=0?1:-1,n=[o.we,o.I].indexOf(t)>=0?"y":"x";N[t]+=P[n]*e}))}return N}},706:(t,e,n)=>{function i(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}n.d(e,{Z:()=>i})},206:(t,e,n)=>{function i(t){return t.split("-")[0]}n.d(e,{Z:()=>i})},743:(t,e,n)=>{function i(){return{top:0,right:0,bottom:0,left:0}}n.d(e,{Z:()=>i})},516:(t,e,n)=>{function i(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}n.d(e,{Z:()=>i})},943:(t,e,n)=>{function i(t){return t.split("-")[1]}n.d(e,{Z:()=>i})},293:(t,e,n)=>{n.d(e,{Z:()=>o});var i=n(743);function o(t){return Object.assign(Object.assign({},(0,i.Z)()),t)}},711:(t,e,n)=>{function i(t,e,n){return Math.max(t,Math.min(e,n))}n.d(e,{Z:()=>i})},909:(t,e,n)=>{n.r(e),n.d(e,{Alert:()=>z,Button:()=>$,Carousel:()=>ht,Collapse:()=>kt,Dropdown:()=>Xt,Modal:()=>ge,Popover:()=>Qe,ScrollSpy:()=>tn,Tab:()=>ln,Toast:()=>vn,Tooltip:()=>Pe});var i=n(704),o=n(804);function r(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}function a(){return(a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i])}return t}).apply(this,arguments)}function l(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var c,u,f="transitionend",d=function(t){do{t+=Math.floor(1e6*Math.random())}while(document.getElementById(t));return t},h=function(t){var e=t.getAttribute("data-bs-target");if(!e||"#"===e){var n=t.getAttribute("href");e=n&&"#"!==n?n.trim():null}return e},p=function(t){var e=h(t);return e&&document.querySelector(e)?e:null},g=function(t){var e=h(t);return e?document.querySelector(e):null},m=function(t){if(!t)return 0;var e=window.getComputedStyle(t),n=e.transitionDuration,i=e.transitionDelay,o=Number.parseFloat(n),r=Number.parseFloat(i);return o||r?(n=n.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(n)+Number.parseFloat(i))):0},v=function(t){t.dispatchEvent(new Event(f))},_=function(t){return(t[0]||t).nodeType},b=function(t,e){var n=!1,i=e+5;t.addEventListener(f,(function e(){n=!0,t.removeEventListener(f,e)})),setTimeout((function(){n||v(t)}),i)},y=function(t,e,n){Object.keys(n).forEach((function(i){var o,r=n[i],s=e[i],a=s&&_(s)?"element":null==(o=s)?""+o:{}.toString.call(o).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(r).test(a))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+a+'" but expected type "'+r+'".')}))},w=function(t){if(!t)return!1;if(t.style&&t.parentNode&&t.parentNode.style){var e=getComputedStyle(t),n=getComputedStyle(t.parentNode);return"none"!==e.display&&"none"!==n.display&&"hidden"!==e.visibility}return!1},E=function t(e){if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){var n=e.getRootNode();return n instanceof ShadowRoot?n:null}return e instanceof ShadowRoot?e:e.parentNode?t(e.parentNode):null},T=function(){return function(){}},k=function(t){return t.offsetHeight},O=function(){var t=window.jQuery;return t&&!document.body.hasAttribute("data-bs-no-jquery")?t:null},L=function(t){"loading"===document.readyState?document.addEventListener("DOMContentLoaded",t):t()},A="rtl"===document.documentElement.dir,C=(c={},u=1,{set:function(t,e,n){void 0===t.bsKey&&(t.bsKey={key:e,id:u},u++),c[t.bsKey.id]=n},get:function(t,e){if(!t||void 0===t.bsKey)return null;var n=t.bsKey;return n.key===e?c[n.id]:null},delete:function(t,e){if(void 0!==t.bsKey){var n=t.bsKey;n.key===e&&(delete c[n.id],delete t.bsKey)}}}),Z=function(t,e,n){C.set(t,e,n)},D=function(t,e){return C.get(t,e)},x=function(t,e){C.delete(t,e)},j=/[^.]*(?=\..*)\.|.*/,S=/\..*/,N=/::\d+$/,I={},P=1,M={mouseenter:"mouseover",mouseleave:"mouseout"},B=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function R(t,e){return e&&e+"::"+P++||t.uidEvent||P++}function H(t){var e=R(t);return t.uidEvent=e,I[e]=I[e]||{},I[e]}function W(t,e,n){void 0===n&&(n=null);for(var i=Object.keys(t),o=0,r=i.length;o<r;o++){var s=t[i[o]];if(s.originalHandler===e&&s.delegationSelector===n)return s}return null}function F(t,e,n){var i="string"==typeof e,o=i?n:e,r=t.replace(S,""),s=M[r];return s&&(r=s),B.has(r)||(r=t),[i,o,r]}function K(t,e,n,i,o){if("string"==typeof e&&t){n||(n=i,i=null);var r=F(e,n,i),s=r[0],a=r[1],l=r[2],c=H(t),u=c[l]||(c[l]={}),f=W(u,a,s?n:null);if(f)f.oneOff=f.oneOff&&o;else{var d=R(a,e.replace(j,"")),h=s?function(t,e,n){return function i(o){for(var r=t.querySelectorAll(e),s=o.target;s&&s!==this;s=s.parentNode)for(var a=r.length;a--;)if(r[a]===s)return o.delegateTarget=s,i.oneOff&&U.off(t,o.type,n),n.apply(s,[o]);return null}}(t,n,i):function(t,e){return function n(i){return i.delegateTarget=t,n.oneOff&&U.off(t,i.type,e),e.apply(t,[i])}}(t,n);h.delegationSelector=s?n:null,h.originalHandler=a,h.oneOff=o,h.uidEvent=d,u[d]=h,t.addEventListener(l,h,s)}}}function Q(t,e,n,i,o){var r=W(e[n],i,o);r&&(t.removeEventListener(n,r,Boolean(o)),delete e[n][r.uidEvent])}var U={on:function(t,e,n,i){K(t,e,n,i,!1)},one:function(t,e,n,i){K(t,e,n,i,!0)},off:function(t,e,n,i){if("string"==typeof e&&t){var o=F(e,n,i),r=o[0],s=o[1],a=o[2],l=a!==e,c=H(t),u=e.startsWith(".");if(void 0===s){u&&Object.keys(c).forEach((function(n){!function(t,e,n,i){var o=e[n]||{};Object.keys(o).forEach((function(r){if(r.includes(i)){var s=o[r];Q(t,e,n,s.originalHandler,s.delegationSelector)}}))}(t,c,n,e.slice(1))}));var f=c[a]||{};Object.keys(f).forEach((function(n){var i=n.replace(N,"");if(!l||e.includes(i)){var o=f[n];Q(t,c,a,o.originalHandler,o.delegationSelector)}}))}else{if(!c||!c[a])return;Q(t,c,a,s,r?n:null)}}},trigger:function(t,e,n){if("string"!=typeof e||!t)return null;var i,o=O(),r=e.replace(S,""),s=e!==r,a=B.has(r),l=!0,c=!0,u=!1,f=null;return s&&o&&(i=o.Event(e,n),o(t).trigger(i),l=!i.isPropagationStopped(),c=!i.isImmediatePropagationStopped(),u=i.isDefaultPrevented()),a?(f=document.createEvent("HTMLEvents")).initEvent(r,l,!0):f=new CustomEvent(e,{bubbles:l,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((function(t){Object.defineProperty(f,t,{get:function(){return n[t]}})})),u&&f.preventDefault(),c&&t.dispatchEvent(f),f.defaultPrevented&&void 0!==i&&i.preventDefault(),f}},Y=function(){function t(t){t&&(this._element=t,Z(t,this.constructor.DATA_KEY,this))}return t.prototype.dispose=function(){x(this._element,this.constructor.DATA_KEY),this._element=null},t.getInstance=function(t){return D(t,this.DATA_KEY)},s(t,null,[{key:"VERSION",get:function(){return"5.0.0-beta1"}}]),t}(),q="bs.alert",z=function(t){function e(){return t.apply(this,arguments)||this}l(e,t);var n=e.prototype;return n.close=function(t){var e=t?this._getRootElement(t):this._element,n=this._triggerCloseEvent(e);null===n||n.defaultPrevented||this._removeElement(e)},n._getRootElement=function(t){return g(t)||t.closest(".alert")},n._triggerCloseEvent=function(t){return U.trigger(t,"close.bs.alert")},n._removeElement=function(t){var e=this;if(t.classList.remove("show"),t.classList.contains("fade")){var n=m(t);U.one(t,f,(function(){return e._destroyElement(t)})),b(t,n)}else this._destroyElement(t)},n._destroyElement=function(t){t.parentNode&&t.parentNode.removeChild(t),U.trigger(t,"closed.bs.alert")},e.jQueryInterface=function(t){return this.each((function(){var n=D(this,q);n||(n=new e(this)),"close"===t&&n[t](this)}))},e.handleDismiss=function(t){return function(e){e&&e.preventDefault(),t.close(this)}},s(e,null,[{key:"DATA_KEY",get:function(){return q}}]),e}(Y);U.on(document,"click.bs.alert.data-api",'[data-bs-dismiss="alert"]',z.handleDismiss(new z)),L((function(){var t=O();if(t){var e=t.fn.alert;t.fn.alert=z.jQueryInterface,t.fn.alert.Constructor=z,t.fn.alert.noConflict=function(){return t.fn.alert=e,z.jQueryInterface}}}));var X="bs.button",V='[data-bs-toggle="button"]',$=function(t){function e(){return t.apply(this,arguments)||this}return l(e,t),e.prototype.toggle=function(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))},e.jQueryInterface=function(t){return this.each((function(){var n=D(this,X);n||(n=new e(this)),"toggle"===t&&n[t]()}))},s(e,null,[{key:"DATA_KEY",get:function(){return X}}]),e}(Y);function G(t){return"true"===t||"false"!==t&&(t===Number(t).toString()?Number(t):""===t||"null"===t?null:t)}function J(t){return t.replace(/[A-Z]/g,(function(t){return"-"+t.toLowerCase()}))}U.on(document,"click.bs.button.data-api",V,(function(t){t.preventDefault();var e=t.target.closest(V),n=D(e,X);n||(n=new $(e)),n.toggle()})),L((function(){var t=O();if(t){var e=t.fn.button;t.fn.button=$.jQueryInterface,t.fn.button.Constructor=$,t.fn.button.noConflict=function(){return t.fn.button=e,$.jQueryInterface}}}));var tt={setDataAttribute:function(t,e,n){t.setAttribute("data-bs-"+J(e),n)},removeDataAttribute:function(t,e){t.removeAttribute("data-bs-"+J(e))},getDataAttributes:function(t){if(!t)return{};var e={};return Object.keys(t.dataset).filter((function(t){return t.startsWith("bs")})).forEach((function(n){var i=n.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),e[i]=G(t.dataset[n])})),e},getDataAttribute:function(t,e){return G(t.getAttribute("data-bs-"+J(e)))},offset:function(t){var e=t.getBoundingClientRect();return{top:e.top+document.body.scrollTop,left:e.left+document.body.scrollLeft}},position:function(t){return{top:t.offsetTop,left:t.offsetLeft}}},et={matches:function(t,e){return t.matches(e)},find:function(t,e){var n;return void 0===e&&(e=document.documentElement),(n=[]).concat.apply(n,Element.prototype.querySelectorAll.call(e,t))},findOne:function(t,e){return void 0===e&&(e=document.documentElement),Element.prototype.querySelector.call(e,t)},children:function(t,e){var n,i=(n=[]).concat.apply(n,t.children);return i.filter((function(t){return t.matches(e)}))},parents:function(t,e){for(var n=[],i=t.parentNode;i&&i.nodeType===Node.ELEMENT_NODE&&3!==i.nodeType;)this.matches(i,e)&&n.push(i),i=i.parentNode;return n},prev:function(t,e){for(var n=t.previousElementSibling;n;){if(n.matches(e))return[n];n=n.previousElementSibling}return[]},next:function(t,e){for(var n=t.nextElementSibling;n;){if(this.matches(n,e))return[n];n=n.nextElementSibling}return[]}},nt="carousel",it="bs.carousel",ot=".bs.carousel",rt={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},st={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},at="next",lt="prev",ct="slid.bs.carousel",ut="active",ft=".active.carousel-item",dt={TOUCH:"touch",PEN:"pen"},ht=function(t){function e(e,n){var i;return(i=t.call(this,e)||this)._items=null,i._interval=null,i._activeElement=null,i._isPaused=!1,i._isSliding=!1,i.touchTimeout=null,i.touchStartX=0,i.touchDeltaX=0,i._config=i._getConfig(n),i._indicatorsElement=et.findOne(".carousel-indicators",i._element),i._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,i._pointerEvent=Boolean(window.PointerEvent),i._addEventListeners(),i}l(e,t);var n=e.prototype;return n.next=function(){this._isSliding||this._slide(at)},n.nextWhenVisible=function(){!document.hidden&&w(this._element)&&this.next()},n.prev=function(){this._isSliding||this._slide(lt)},n.pause=function(t){t||(this._isPaused=!0),et.findOne(".carousel-item-next, .carousel-item-prev",this._element)&&(v(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},n.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},n.to=function(t){var e=this;this._activeElement=et.findOne(ft,this._element);var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)U.one(this._element,ct,(function(){return e.to(t)}));else{if(n===t)return this.pause(),void this.cycle();var i=t>n?at:lt;this._slide(i,this._items[t])}},n.dispose=function(){t.prototype.dispose.call(this),U.off(this._element,ot),this._items=null,this._config=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},n._getConfig=function(t){return t=a({},rt,t),y(nt,t,st),t},n._handleSwipe=function(){var t=Math.abs(this.touchDeltaX);if(!(t<=40)){var e=t/this.touchDeltaX;this.touchDeltaX=0,e>0&&this.prev(),e<0&&this.next()}},n._addEventListeners=function(){var t=this;this._config.keyboard&&U.on(this._element,"keydown.bs.carousel",(function(e){return t._keydown(e)})),"hover"===this._config.pause&&(U.on(this._element,"mouseenter.bs.carousel",(function(e){return t.pause(e)})),U.on(this._element,"mouseleave.bs.carousel",(function(e){return t.cycle(e)}))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()},n._addTouchEventListeners=function(){var t=this,e=function(e){t._pointerEvent&&dt[e.pointerType.toUpperCase()]?t.touchStartX=e.clientX:t._pointerEvent||(t.touchStartX=e.touches[0].clientX)},n=function(e){t._pointerEvent&&dt[e.pointerType.toUpperCase()]&&(t.touchDeltaX=e.clientX-t.touchStartX),t._handleSwipe(),"hover"===t._config.pause&&(t.pause(),t.touchTimeout&&clearTimeout(t.touchTimeout),t.touchTimeout=setTimeout((function(e){return t.cycle(e)}),500+t._config.interval))};et.find(".carousel-item img",this._element).forEach((function(t){U.on(t,"dragstart.bs.carousel",(function(t){return t.preventDefault()}))})),this._pointerEvent?(U.on(this._element,"pointerdown.bs.carousel",(function(t){return e(t)})),U.on(this._element,"pointerup.bs.carousel",(function(t){return n(t)})),this._element.classList.add("pointer-event")):(U.on(this._element,"touchstart.bs.carousel",(function(t){return e(t)})),U.on(this._element,"touchmove.bs.carousel",(function(e){return function(e){e.touches&&e.touches.length>1?t.touchDeltaX=0:t.touchDeltaX=e.touches[0].clientX-t.touchStartX}(e)})),U.on(this._element,"touchend.bs.carousel",(function(t){return n(t)})))},n._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.key){case"ArrowLeft":t.preventDefault(),this.prev();break;case"ArrowRight":t.preventDefault(),this.next()}},n._getItemIndex=function(t){return this._items=t&&t.parentNode?et.find(".carousel-item",t.parentNode):[],this._items.indexOf(t)},n._getItemByDirection=function(t,e){var n=t===at,i=t===lt,o=this._getItemIndex(e),r=this._items.length-1;if((i&&0===o||n&&o===r)&&!this._config.wrap)return e;var s=(o+(t===lt?-1:1))%this._items.length;return-1===s?this._items[this._items.length-1]:this._items[s]},n._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(et.findOne(ft,this._element));return U.trigger(this._element,"slide.bs.carousel",{relatedTarget:t,direction:e,from:i,to:n})},n._setActiveIndicatorElement=function(t){if(this._indicatorsElement){for(var e=et.find(".active",this._indicatorsElement),n=0;n<e.length;n++)e[n].classList.remove(ut);var i=this._indicatorsElement.children[this._getItemIndex(t)];i&&i.classList.add(ut)}},n._updateInterval=function(){var t=this._activeElement||et.findOne(ft,this._element);if(t){var e=Number.parseInt(t.getAttribute("data-bs-interval"),10);e?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=e):this._config.interval=this._config.defaultInterval||this._config.interval}},n._slide=function(t,e){var n,i,o,r=this,s=et.findOne(ft,this._element),a=this._getItemIndex(s),l=e||s&&this._getItemByDirection(t,s),c=this._getItemIndex(l),u=Boolean(this._interval);if(t===at?(n="carousel-item-start",i="carousel-item-next",o="left"):(n="carousel-item-end",i="carousel-item-prev",o="right"),l&&l.classList.contains(ut))this._isSliding=!1;else if(!this._triggerSlideEvent(l,o).defaultPrevented&&s&&l){if(this._isSliding=!0,u&&this.pause(),this._setActiveIndicatorElement(l),this._activeElement=l,this._element.classList.contains("slide")){l.classList.add(i),k(l),s.classList.add(n),l.classList.add(n);var d=m(s);U.one(s,f,(function(){l.classList.remove(n,i),l.classList.add(ut),s.classList.remove(ut,i,n),r._isSliding=!1,setTimeout((function(){U.trigger(r._element,ct,{relatedTarget:l,direction:o,from:a,to:c})}),0)})),b(s,d)}else s.classList.remove(ut),l.classList.add(ut),this._isSliding=!1,U.trigger(this._element,ct,{relatedTarget:l,direction:o,from:a,to:c});u&&this.cycle()}},e.carouselInterface=function(t,n){var i=D(t,it),o=a({},rt,tt.getDataAttributes(t));"object"==typeof n&&(o=a({},o,n));var r="string"==typeof n?n:o.slide;if(i||(i=new e(t,o)),"number"==typeof n)i.to(n);else if("string"==typeof r){if(void 0===i[r])throw new TypeError('No method named "'+r+'"');i[r]()}else o.interval&&o.ride&&(i.pause(),i.cycle())},e.jQueryInterface=function(t){return this.each((function(){e.carouselInterface(this,t)}))},e.dataApiClickHandler=function(t){var n=g(this);if(n&&n.classList.contains("carousel")){var i=a({},tt.getDataAttributes(n),tt.getDataAttributes(this)),o=this.getAttribute("data-bs-slide-to");o&&(i.interval=!1),e.carouselInterface(n,i),o&&D(n,it).to(o),t.preventDefault()}},s(e,null,[{key:"Default",get:function(){return rt}},{key:"DATA_KEY",get:function(){return it}}]),e}(Y);U.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",ht.dataApiClickHandler),U.on(window,"load.bs.carousel.data-api",(function(){for(var t=et.find('[data-bs-ride="carousel"]'),e=0,n=t.length;e<n;e++)ht.carouselInterface(t[e],D(t[e],it))})),L((function(){var t=O();if(t){var e=t.fn[nt];t.fn[nt]=ht.jQueryInterface,t.fn[nt].Constructor=ht,t.fn[nt].noConflict=function(){return t.fn[nt]=e,ht.jQueryInterface}}}));var pt="collapse",gt="bs.collapse",mt={toggle:!0,parent:""},vt={toggle:"boolean",parent:"(string|element)"},_t="show",bt="collapse",yt="collapsing",wt="collapsed",Et="width",Tt='[data-bs-toggle="collapse"]',kt=function(t){function e(e,n){var i;(i=t.call(this,e)||this)._isTransitioning=!1,i._config=i._getConfig(n),i._triggerArray=et.find(Tt+'[href="#'+e.id+'"],'+Tt+'[data-bs-target="#'+e.id+'"]');for(var o=et.find(Tt),r=0,s=o.length;r<s;r++){var a=o[r],l=p(a),c=et.find(l).filter((function(t){return t===e}));null!==l&&c.length&&(i._selector=l,i._triggerArray.push(a))}return i._parent=i._config.parent?i._getParent():null,i._config.parent||i._addAriaAndCollapsedClass(i._element,i._triggerArray),i._config.toggle&&i.toggle(),i}l(e,t);var n=e.prototype;return n.toggle=function(){this._element.classList.contains(_t)?this.hide():this.show()},n.show=function(){var t=this;if(!this._isTransitioning&&!this._element.classList.contains(_t)){var n,i;this._parent&&0===(n=et.find(".show, .collapsing",this._parent).filter((function(e){return"string"==typeof t._config.parent?e.getAttribute("data-bs-parent")===t._config.parent:e.classList.contains(bt)}))).length&&(n=null);var o=et.findOne(this._selector);if(n){var r=n.find((function(t){return o!==t}));if((i=r?D(r,gt):null)&&i._isTransitioning)return}if(!U.trigger(this._element,"show.bs.collapse").defaultPrevented){n&&n.forEach((function(t){o!==t&&e.collapseInterface(t,"hide"),i||Z(t,gt,null)}));var s=this._getDimension();this._element.classList.remove(bt),this._element.classList.add(yt),this._element.style[s]=0,this._triggerArray.length&&this._triggerArray.forEach((function(t){t.classList.remove(wt),t.setAttribute("aria-expanded",!0)})),this.setTransitioning(!0);var a="scroll"+(s[0].toUpperCase()+s.slice(1)),l=m(this._element);U.one(this._element,f,(function(){t._element.classList.remove(yt),t._element.classList.add(bt,_t),t._element.style[s]="",t.setTransitioning(!1),U.trigger(t._element,"shown.bs.collapse")})),b(this._element,l),this._element.style[s]=this._element[a]+"px"}}},n.hide=function(){var t=this;if(!this._isTransitioning&&this._element.classList.contains(_t)&&!U.trigger(this._element,"hide.bs.collapse").defaultPrevented){var e=this._getDimension();this._element.style[e]=this._element.getBoundingClientRect()[e]+"px",k(this._element),this._element.classList.add(yt),this._element.classList.remove(bt,_t);var n=this._triggerArray.length;if(n>0)for(var i=0;i<n;i++){var o=this._triggerArray[i],r=g(o);r&&!r.classList.contains(_t)&&(o.classList.add(wt),o.setAttribute("aria-expanded",!1))}this.setTransitioning(!0);this._element.style[e]="";var s=m(this._element);U.one(this._element,f,(function(){t.setTransitioning(!1),t._element.classList.remove(yt),t._element.classList.add(bt),U.trigger(t._element,"hidden.bs.collapse")})),b(this._element,s)}},n.setTransitioning=function(t){this._isTransitioning=t},n.dispose=function(){t.prototype.dispose.call(this),this._config=null,this._parent=null,this._triggerArray=null,this._isTransitioning=null},n._getConfig=function(t){return(t=a({},mt,t)).toggle=Boolean(t.toggle),y(pt,t,vt),t},n._getDimension=function(){return this._element.classList.contains(Et)?Et:"height"},n._getParent=function(){var t=this,e=this._config.parent;_(e)?void 0===e.jquery&&void 0===e[0]||(e=e[0]):e=et.findOne(e);var n=Tt+'[data-bs-parent="'+e+'"]';return et.find(n,e).forEach((function(e){var n=g(e);t._addAriaAndCollapsedClass(n,[e])})),e},n._addAriaAndCollapsedClass=function(t,e){if(t&&e.length){var n=t.classList.contains(_t);e.forEach((function(t){n?t.classList.remove(wt):t.classList.add(wt),t.setAttribute("aria-expanded",n)}))}},e.collapseInterface=function(t,n){var i=D(t,gt),o=a({},mt,tt.getDataAttributes(t),"object"==typeof n&&n?n:{});if(!i&&o.toggle&&"string"==typeof n&&/show|hide/.test(n)&&(o.toggle=!1),i||(i=new e(t,o)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}},e.jQueryInterface=function(t){return this.each((function(){e.collapseInterface(this,t)}))},s(e,null,[{key:"Default",get:function(){return mt}},{key:"DATA_KEY",get:function(){return gt}}]),e}(Y);U.on(document,"click.bs.collapse.data-api",Tt,(function(t){"A"===t.target.tagName&&t.preventDefault();var e=tt.getDataAttributes(this),n=p(this);et.find(n).forEach((function(t){var n,i=D(t,gt);i?(null===i._parent&&"string"==typeof e.parent&&(i._config.parent=e.parent,i._parent=i._getParent()),n="toggle"):n=e,kt.collapseInterface(t,n)}))})),L((function(){var t=O();if(t){var e=t.fn[pt];t.fn[pt]=kt.jQueryInterface,t.fn[pt].Constructor=kt,t.fn[pt].noConflict=function(){return t.fn[pt]=e,kt.jQueryInterface}}}));var Ot="dropdown",Lt="bs.dropdown",At=".bs.dropdown",Ct="Escape",Zt="Space",Dt="ArrowUp",xt="ArrowDown",jt=new RegExp("ArrowUp|ArrowDown|Escape"),St="hide.bs.dropdown",Nt="hidden.bs.dropdown",It="click.bs.dropdown.data-api",Pt="keydown.bs.dropdown.data-api",Mt="disabled",Bt="show",Rt='[data-bs-toggle="dropdown"]',Ht=".dropdown-menu",Wt=A?"top-end":"top-start",Ft=A?"top-start":"top-end",Kt=A?"bottom-end":"bottom-start",Qt=A?"bottom-start":"bottom-end",Ut=A?"left-start":"right-start",Yt=A?"right-start":"left-start",qt={offset:0,flip:!0,boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null},zt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},Xt=function(t){function e(e,n){var i;return(i=t.call(this,e)||this)._popper=null,i._config=i._getConfig(n),i._menu=i._getMenuElement(),i._inNavbar=i._detectNavbar(),i._addEventListeners(),i}l(e,t);var n=e.prototype;return n.toggle=function(){if(!this._element.disabled&&!this._element.classList.contains(Mt)){var t=this._element.classList.contains(Bt);e.clearMenus(),t||this.show()}},n.show=function(){if(!(this._element.disabled||this._element.classList.contains(Mt)||this._menu.classList.contains(Bt))){var t=e.getParentFromElement(this._element),n={relatedTarget:this._element};if(!U.trigger(this._element,"show.bs.dropdown",n).defaultPrevented){if(!this._inNavbar){if(void 0===i)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var r=this._element;"parent"===this._config.reference?r=t:_(this._config.reference)&&(r=this._config.reference,void 0!==this._config.reference.jquery&&(r=this._config.reference[0])),this._popper=(0,o.fi)(r,this._menu,this._getPopperConfig())}var s;if("ontouchstart"in document.documentElement&&!t.closest(".navbar-nav"))(s=[]).concat.apply(s,document.body.children).forEach((function(t){return U.on(t,"mouseover",null,(function(){}))}));this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.toggle(Bt),this._element.classList.toggle(Bt),U.trigger(t,"shown.bs.dropdown",n)}}},n.hide=function(){if(!this._element.disabled&&!this._element.classList.contains(Mt)&&this._menu.classList.contains(Bt)){var t=e.getParentFromElement(this._element),n={relatedTarget:this._element};U.trigger(t,St,n).defaultPrevented||(this._popper&&this._popper.destroy(),this._menu.classList.toggle(Bt),this._element.classList.toggle(Bt),U.trigger(t,Nt,n))}},n.dispose=function(){t.prototype.dispose.call(this),U.off(this._element,At),this._menu=null,this._popper&&(this._popper.destroy(),this._popper=null)},n.update=function(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()},n._addEventListeners=function(){var t=this;U.on(this._element,"click.bs.dropdown",(function(e){e.preventDefault(),e.stopPropagation(),t.toggle()}))},n._getConfig=function(t){return t=a({},this.constructor.Default,tt.getDataAttributes(this._element),t),y(Ot,t,this.constructor.DefaultType),t},n._getMenuElement=function(){return et.next(this._element,Ht)[0]},n._getPlacement=function(){var t=this._element.parentNode;if(t.classList.contains("dropend"))return Ut;if(t.classList.contains("dropstart"))return Yt;var e="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return t.classList.contains("dropup")?e?Ft:Wt:e?Qt:Kt},n._detectNavbar=function(){return null!==this._element.closest(".navbar")},n._getPopperConfig=function(){var t={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{altBoundary:this._config.flip,rootBoundary:this._config.boundary}}]};return"static"===this._config.display&&(t.modifiers=[{name:"applyStyles",enabled:!1}]),a({},t,this._config.popperConfig)},e.dropdownInterface=function(t,n){var i=D(t,Lt);if(i||(i=new e(t,"object"==typeof n?n:null)),"string"==typeof n){if(void 0===i[n])throw new TypeError('No method named "'+n+'"');i[n]()}},e.jQueryInterface=function(t){return this.each((function(){e.dropdownInterface(this,t)}))},e.clearMenus=function(t){if(!t||2!==t.button&&("keyup"!==t.type||"Tab"===t.key))for(var n=et.find(Rt),i=0,o=n.length;i<o;i++){var r=e.getParentFromElement(n[i]),s=D(n[i],Lt),a={relatedTarget:n[i]};if(t&&"click"===t.type&&(a.clickEvent=t),s){var l=s._menu;if(n[i].classList.contains(Bt))if(!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&"Tab"===t.key)&&l.contains(t.target)))if(!U.trigger(r,St,a).defaultPrevented){var c;if("ontouchstart"in document.documentElement)(c=[]).concat.apply(c,document.body.children).forEach((function(t){return U.off(t,"mouseover",null,(function(){}))}));n[i].setAttribute("aria-expanded","false"),s._popper&&s._popper.destroy(),l.classList.remove(Bt),n[i].classList.remove(Bt),U.trigger(r,Nt,a)}}}},e.getParentFromElement=function(t){return g(t)||t.parentNode},e.dataApiKeydownHandler=function(t){if(!(/input|textarea/i.test(t.target.tagName)?t.key===Zt||t.key!==Ct&&(t.key!==xt&&t.key!==Dt||t.target.closest(Ht)):!jt.test(t.key))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!this.classList.contains(Mt))){var n=e.getParentFromElement(this),i=this.classList.contains(Bt);if(t.key===Ct)return(this.matches(Rt)?this:et.prev(this,Rt)[0]).focus(),void e.clearMenus();if(i&&t.key!==Zt){var o=et.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",n).filter(w);if(o.length){var r=o.indexOf(t.target);t.key===Dt&&r>0&&r--,t.key===xt&&r<o.length-1&&r++,o[r=-1===r?0:r].focus()}}else e.clearMenus()}},s(e,null,[{key:"Default",get:function(){return qt}},{key:"DefaultType",get:function(){return zt}},{key:"DATA_KEY",get:function(){return Lt}}]),e}(Y);U.on(document,Pt,Rt,Xt.dataApiKeydownHandler),U.on(document,Pt,Ht,Xt.dataApiKeydownHandler),U.on(document,It,Xt.clearMenus),U.on(document,"keyup.bs.dropdown.data-api",Xt.clearMenus),U.on(document,It,Rt,(function(t){t.preventDefault(),t.stopPropagation(),Xt.dropdownInterface(this,"toggle")})),U.on(document,It,".dropdown form",(function(t){return t.stopPropagation()})),L((function(){var t=O();if(t){var e=t.fn[Ot];t.fn[Ot]=Xt.jQueryInterface,t.fn[Ot].Constructor=Xt,t.fn[Ot].noConflict=function(){return t.fn[Ot]=e,Xt.jQueryInterface}}}));var Vt="modal",$t="bs.modal",Gt=".bs.modal",Jt="Escape",te={backdrop:!0,keyboard:!0,focus:!0},ee={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},ne="hidden.bs.modal",ie="show.bs.modal",oe="focusin.bs.modal",re="resize.bs.modal",se="click.dismiss.bs.modal",ae="keydown.dismiss.bs.modal",le="mousedown.dismiss.bs.modal",ce="modal-open",ue="fade",fe="show",de="modal-static",he=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",pe=".sticky-top",ge=function(t){function e(e,n){var i;return(i=t.call(this,e)||this)._config=i._getConfig(n),i._dialog=et.findOne(".modal-dialog",e),i._backdrop=null,i._isShown=!1,i._isBodyOverflowing=!1,i._ignoreBackdropClick=!1,i._isTransitioning=!1,i._scrollbarWidth=0,i}l(e,t);var n=e.prototype;return n.toggle=function(t){return this._isShown?this.hide():this.show(t)},n.show=function(t){var e=this;if(!this._isShown&&!this._isTransitioning){this._element.classList.contains(ue)&&(this._isTransitioning=!0);var n=U.trigger(this._element,ie,{relatedTarget:t});this._isShown||n.defaultPrevented||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),U.on(this._element,se,'[data-bs-dismiss="modal"]',(function(t){return e.hide(t)})),U.on(this._dialog,le,(function(){U.one(e._element,"mouseup.dismiss.bs.modal",(function(t){t.target===e._element&&(e._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return e._showElement(t)})))}},n.hide=function(t){var e=this;if((t&&t.preventDefault(),this._isShown&&!this._isTransitioning)&&!U.trigger(this._element,"hide.bs.modal").defaultPrevented){this._isShown=!1;var n=this._element.classList.contains(ue);if(n&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),U.off(document,oe),this._element.classList.remove(fe),U.off(this._element,se),U.off(this._dialog,le),n){var i=m(this._element);U.one(this._element,f,(function(t){return e._hideModal(t)})),b(this._element,i)}else this._hideModal()}},n.dispose=function(){[window,this._element,this._dialog].forEach((function(t){return U.off(t,Gt)})),t.prototype.dispose.call(this),U.off(document,oe),this._config=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},n.handleUpdate=function(){this._adjustDialog()},n._getConfig=function(t){return t=a({},te,t),y(Vt,t,ee),t},n._showElement=function(t){var e=this,n=this._element.classList.contains(ue),i=et.findOne(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,i&&(i.scrollTop=0),n&&k(this._element),this._element.classList.add(fe),this._config.focus&&this._enforceFocus();var o=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,U.trigger(e._element,"shown.bs.modal",{relatedTarget:t})};if(n){var r=m(this._dialog);U.one(this._dialog,f,o),b(this._dialog,r)}else o()},n._enforceFocus=function(){var t=this;U.off(document,oe),U.on(document,oe,(function(e){document===e.target||t._element===e.target||t._element.contains(e.target)||t._element.focus()}))},n._setEscapeEvent=function(){var t=this;this._isShown?U.on(this._element,ae,(function(e){t._config.keyboard&&e.key===Jt?(e.preventDefault(),t.hide()):t._config.keyboard||e.key!==Jt||t._triggerBackdropTransition()})):U.off(this._element,ae)},n._setResizeEvent=function(){var t=this;this._isShown?U.on(window,re,(function(){return t._adjustDialog()})):U.off(window,re)},n._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._showBackdrop((function(){document.body.classList.remove(ce),t._resetAdjustments(),t._resetScrollbar(),U.trigger(t._element,ne)}))},n._removeBackdrop=function(){this._backdrop.parentNode.removeChild(this._backdrop),this._backdrop=null},n._showBackdrop=function(t){var e=this,n=this._element.classList.contains(ue)?ue:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",n&&this._backdrop.classList.add(n),document.body.appendChild(this._backdrop),U.on(this._element,se,(function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._triggerBackdropTransition():e.hide())})),n&&k(this._backdrop),this._backdrop.classList.add(fe),!n)return void t();var i=m(this._backdrop);U.one(this._backdrop,f,t),b(this._backdrop,i)}else if(!this._isShown&&this._backdrop){this._backdrop.classList.remove(fe);var o=function(){e._removeBackdrop(),t()};if(this._element.classList.contains(ue)){var r=m(this._backdrop);U.one(this._backdrop,f,o),b(this._backdrop,r)}else o()}else t()},n._triggerBackdropTransition=function(){var t=this;if(!U.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented){var e=this._element.scrollHeight>document.documentElement.clientHeight;e||(this._element.style.overflowY="hidden"),this._element.classList.add(de);var n=m(this._dialog);U.off(this._element,f),U.one(this._element,f,(function(){t._element.classList.remove(de),e||(U.one(t._element,f,(function(){t._element.style.overflowY=""})),b(t._element,n))})),b(this._element,n),this._element.focus()}},n._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;(!this._isBodyOverflowing&&t&&!A||this._isBodyOverflowing&&!t&&A)&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),(this._isBodyOverflowing&&!t&&!A||!this._isBodyOverflowing&&t&&A)&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},n._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},n._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=Math.round(t.left+t.right)<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},n._setScrollbar=function(){var t=this;if(this._isBodyOverflowing){et.find(he).forEach((function(e){var n=e.style.paddingRight,i=window.getComputedStyle(e)["padding-right"];tt.setDataAttribute(e,"padding-right",n),e.style.paddingRight=Number.parseFloat(i)+t._scrollbarWidth+"px"})),et.find(pe).forEach((function(e){var n=e.style.marginRight,i=window.getComputedStyle(e)["margin-right"];tt.setDataAttribute(e,"margin-right",n),e.style.marginRight=Number.parseFloat(i)-t._scrollbarWidth+"px"}));var e=document.body.style.paddingRight,n=window.getComputedStyle(document.body)["padding-right"];tt.setDataAttribute(document.body,"padding-right",e),document.body.style.paddingRight=Number.parseFloat(n)+this._scrollbarWidth+"px"}document.body.classList.add(ce)},n._resetScrollbar=function(){et.find(he).forEach((function(t){var e=tt.getDataAttribute(t,"padding-right");void 0!==e&&(tt.removeDataAttribute(t,"padding-right"),t.style.paddingRight=e)})),et.find(".sticky-top").forEach((function(t){var e=tt.getDataAttribute(t,"margin-right");void 0!==e&&(tt.removeDataAttribute(t,"margin-right"),t.style.marginRight=e)}));var t=tt.getDataAttribute(document.body,"padding-right");void 0===t?document.body.style.paddingRight="":(tt.removeDataAttribute(document.body,"padding-right"),document.body.style.paddingRight=t)},n._getScrollbarWidth=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},e.jQueryInterface=function(t,n){return this.each((function(){var i=D(this,$t),o=a({},te,tt.getDataAttributes(this),"object"==typeof t&&t?t:{});if(i||(i=new e(this,o)),"string"==typeof t){if(void 0===i[t])throw new TypeError('No method named "'+t+'"');i[t](n)}}))},s(e,null,[{key:"Default",get:function(){return te}},{key:"DATA_KEY",get:function(){return $t}}]),e}(Y);U.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(t){var e=this,n=g(this);"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault(),U.one(n,ie,(function(t){t.defaultPrevented||U.one(n,ne,(function(){w(e)&&e.focus()}))}));var i=D(n,$t);if(!i){var o=a({},tt.getDataAttributes(n),tt.getDataAttributes(this));i=new ge(n,o)}i.show(this)})),L((function(){var t=O();if(t){var e=t.fn.modal;t.fn.modal=ge.jQueryInterface,t.fn.modal.Constructor=ge,t.fn.modal.noConflict=function(){return t.fn.modal=e,ge.jQueryInterface}}}));var me=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),ve=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,_e=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,be={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};function ye(t,e,n){var i;if(!t.length)return t;if(n&&"function"==typeof n)return n(t);for(var o=(new window.DOMParser).parseFromString(t,"text/html"),r=Object.keys(e),s=(i=[]).concat.apply(i,o.body.querySelectorAll("*")),a=function(t,n){var i,o=s[t],a=o.nodeName.toLowerCase();if(!r.includes(a))return o.parentNode.removeChild(o),"continue";var l=(i=[]).concat.apply(i,o.attributes),c=[].concat(e["*"]||[],e[a]||[]);l.forEach((function(t){(function(t,e){var n=t.nodeName.toLowerCase();if(e.includes(n))return!me.has(n)||Boolean(t.nodeValue.match(ve)||t.nodeValue.match(_e));for(var i=e.filter((function(t){return t instanceof RegExp})),o=0,r=i.length;o<r;o++)if(n.match(i[o]))return!0;return!1})(t,c)||o.removeAttribute(t.nodeName)}))},l=0,c=s.length;l<c;l++)a(l);return o.body.innerHTML}var we="tooltip",Ee="bs.tooltip",Te=".bs.tooltip",ke=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Oe=new Set(["sanitize","allowList","sanitizeFn"]),Le={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",container:"(string|element|boolean)",fallbackPlacements:"(null|array)",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object)"},Ae={AUTO:"auto",TOP:"top",RIGHT:A?"left":"right",BOTTOM:"bottom",LEFT:A?"right":"left"},Ce={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",container:!1,fallbackPlacements:null,boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:be,popperConfig:null},Ze={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},De="fade",xe="show",je="show",Se="out",Ne="hover",Ie="focus",Pe=function(t){function e(e,n){var o;if(void 0===i)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");return(o=t.call(this,e)||this)._isEnabled=!0,o._timeout=0,o._hoverState="",o._activeTrigger={},o._popper=null,o.config=o._getConfig(n),o.tip=null,o._setListeners(),o}l(e,t);var n=e.prototype;return n.enable=function(){this._isEnabled=!0},n.disable=function(){this._isEnabled=!1},n.toggleEnabled=function(){this._isEnabled=!this._isEnabled},n.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=D(t.delegateTarget,e);n||(n=new this.constructor(t.delegateTarget,this._getDelegateConfig()),Z(t.delegateTarget,e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(this.getTipElement().classList.contains(xe))return void this._leave(null,this);this._enter(null,this)}},n.dispose=function(){clearTimeout(this._timeout),U.off(this._element,this.constructor.EVENT_KEY),U.off(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this.tip&&this.tip.parentNode.removeChild(this.tip),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.config=null,this.tip=null,t.prototype.dispose.call(this)},n.show=function(){var t=this;if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(this.isWithContent()&&this._isEnabled){var e=U.trigger(this._element,this.constructor.Event.SHOW),n=E(this._element),i=null===n?this._element.ownerDocument.documentElement.contains(this._element):n.contains(this._element);if(e.defaultPrevented||!i)return;var r=this.getTipElement(),s=d(this.constructor.NAME);r.setAttribute("id",s),this._element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&r.classList.add(De);var a="function"==typeof this.config.placement?this.config.placement.call(this,r,this._element):this.config.placement,l=this._getAttachment(a);this._addAttachmentClass(l);var c=this._getContainer();Z(r,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||c.appendChild(r),U.trigger(this._element,this.constructor.Event.INSERTED),this._popper=(0,o.fi)(this._element,r,this._getPopperConfig(l)),r.classList.add(xe);var u,h,p="function"==typeof this.config.customClass?this.config.customClass():this.config.customClass;if(p)(u=r.classList).add.apply(u,p.split(" "));if("ontouchstart"in document.documentElement)(h=[]).concat.apply(h,document.body.children).forEach((function(t){U.on(t,"mouseover",(function(){}))}));var g=function(){var e=t._hoverState;t._hoverState=null,U.trigger(t._element,t.constructor.Event.SHOWN),e===Se&&t._leave(null,t)};if(this.tip.classList.contains(De)){var v=m(this.tip);U.one(this.tip,f,g),b(this.tip,v)}else g()}},n.hide=function(){var t=this;if(this._popper){var e=this.getTipElement(),n=function(){t._hoverState!==je&&e.parentNode&&e.parentNode.removeChild(e),t._cleanTipClass(),t._element.removeAttribute("aria-describedby"),U.trigger(t._element,t.constructor.Event.HIDDEN),t._popper&&(t._popper.destroy(),t._popper=null)};if(!U.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented){var i;if(e.classList.remove(xe),"ontouchstart"in document.documentElement)(i=[]).concat.apply(i,document.body.children).forEach((function(t){return U.off(t,"mouseover",T)}));if(this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,this.tip.classList.contains(De)){var o=m(e);U.one(e,f,n),b(e,o)}else n();this._hoverState=""}}},n.update=function(){null!==this._popper&&this._popper.update()},n.isWithContent=function(){return Boolean(this.getTitle())},n.getTipElement=function(){if(this.tip)return this.tip;var t=document.createElement("div");return t.innerHTML=this.config.template,this.tip=t.children[0],this.tip},n.setContent=function(){var t=this.getTipElement();this.setElementContent(et.findOne(".tooltip-inner",t),this.getTitle()),t.classList.remove(De,xe)},n.setElementContent=function(t,e){if(null!==t)return"object"==typeof e&&_(e)?(e.jquery&&(e=e[0]),void(this.config.html?e.parentNode!==t&&(t.innerHTML="",t.appendChild(e)):t.textContent=e.textContent)):void(this.config.html?(this.config.sanitize&&(e=ye(e,this.config.allowList,this.config.sanitizeFn)),t.innerHTML=e):t.textContent=e)},n.getTitle=function(){var t=this._element.getAttribute("data-bs-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this._element):this.config.title),t},n.updateAttachment=function(t){return"right"===t?"end":"left"===t?"start":t},n._getPopperConfig=function(t){var e=this,n={name:"flip",options:{altBoundary:!0}};return this.config.fallbackPlacements&&(n.options.fallbackPlacements=this.config.fallbackPlacements),a({},{placement:t,modifiers:[n,{name:"preventOverflow",options:{rootBoundary:this.config.boundary}},{name:"arrow",options:{element:"."+this.constructor.NAME+"-arrow"}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:function(t){return e._handlePopperPlacementChange(t)}}],onFirstUpdate:function(t){t.options.placement!==t.placement&&e._handlePopperPlacementChange(t)}},this.config.popperConfig)},n._addAttachmentClass=function(t){this.getTipElement().classList.add("bs-tooltip-"+this.updateAttachment(t))},n._getContainer=function(){return!1===this.config.container?document.body:_(this.config.container)?this.config.container:et.findOne(this.config.container)},n._getAttachment=function(t){return Ae[t.toUpperCase()]},n._setListeners=function(){var t=this;this.config.trigger.split(" ").forEach((function(e){if("click"===e)U.on(t._element,t.constructor.Event.CLICK,t.config.selector,(function(e){return t.toggle(e)}));else if("manual"!==e){var n=e===Ne?t.constructor.Event.MOUSEENTER:t.constructor.Event.FOCUSIN,i=e===Ne?t.constructor.Event.MOUSELEAVE:t.constructor.Event.FOCUSOUT;U.on(t._element,n,t.config.selector,(function(e){return t._enter(e)})),U.on(t._element,i,t.config.selector,(function(e){return t._leave(e)}))}})),this._hideModalHandler=function(){t._element&&t.hide()},U.on(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},n._fixTitle=function(){var t=this._element.getAttribute("title"),e=typeof this._element.getAttribute("data-bs-original-title");(t||"string"!==e)&&(this._element.setAttribute("data-bs-original-title",t||""),!t||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",t),this._element.setAttribute("title",""))},n._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||D(t.delegateTarget,n))||(e=new this.constructor(t.delegateTarget,this._getDelegateConfig()),Z(t.delegateTarget,n,e)),t&&(e._activeTrigger["focusin"===t.type?Ie:Ne]=!0),e.getTipElement().classList.contains(xe)||e._hoverState===je?e._hoverState=je:(clearTimeout(e._timeout),e._hoverState=je,e.config.delay&&e.config.delay.show?e._timeout=setTimeout((function(){e._hoverState===je&&e.show()}),e.config.delay.show):e.show())},n._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||D(t.delegateTarget,n))||(e=new this.constructor(t.delegateTarget,this._getDelegateConfig()),Z(t.delegateTarget,n,e)),t&&(e._activeTrigger["focusout"===t.type?Ie:Ne]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=Se,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout((function(){e._hoverState===Se&&e.hide()}),e.config.delay.hide):e.hide())},n._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},n._getConfig=function(t){var e=tt.getDataAttributes(this._element);return Object.keys(e).forEach((function(t){Oe.has(t)&&delete e[t]})),t&&"object"==typeof t.container&&t.container.jquery&&(t.container=t.container[0]),"number"==typeof(t=a({},this.constructor.Default,e,"object"==typeof t&&t?t:{})).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),y(we,t,this.constructor.DefaultType),t.sanitize&&(t.template=ye(t.template,t.allowList,t.sanitizeFn)),t},n._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},n._cleanTipClass=function(){var t=this.getTipElement(),e=t.getAttribute("class").match(ke);null!==e&&e.length>0&&e.map((function(t){return t.trim()})).forEach((function(e){return t.classList.remove(e)}))},n._handlePopperPlacementChange=function(t){var e=t.state;e&&(this.tip=e.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(e.placement)))},e.jQueryInterface=function(t){return this.each((function(){var n=D(this,Ee),i="object"==typeof t&&t;if((n||!/dispose|hide/.test(t))&&(n||(n=new e(this,i)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"Default",get:function(){return Ce}},{key:"NAME",get:function(){return we}},{key:"DATA_KEY",get:function(){return Ee}},{key:"Event",get:function(){return Ze}},{key:"EVENT_KEY",get:function(){return Te}},{key:"DefaultType",get:function(){return Le}}]),e}(Y);L((function(){var t=O();if(t){var e=t.fn.tooltip;t.fn.tooltip=Pe.jQueryInterface,t.fn.tooltip.Constructor=Pe,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=e,Pe.jQueryInterface}}}));var Me="popover",Be="bs.popover",Re=".bs.popover",He=new RegExp("(^|\\s)bs-popover\\S+","g"),We=a({},Pe.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Fe=a({},Pe.DefaultType,{content:"(string|element|function)"}),Ke={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},Qe=function(t){function e(){return t.apply(this,arguments)||this}l(e,t);var n=e.prototype;return n.isWithContent=function(){return this.getTitle()||this._getContent()},n.setContent=function(){var t=this.getTipElement();this.setElementContent(et.findOne(".popover-header",t),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this._element)),this.setElementContent(et.findOne(".popover-body",t),e),t.classList.remove("fade","show")},n._addAttachmentClass=function(t){this.getTipElement().classList.add("bs-popover-"+this.updateAttachment(t))},n._getContent=function(){return this._element.getAttribute("data-bs-content")||this.config.content},n._cleanTipClass=function(){var t=this.getTipElement(),e=t.getAttribute("class").match(He);null!==e&&e.length>0&&e.map((function(t){return t.trim()})).forEach((function(e){return t.classList.remove(e)}))},e.jQueryInterface=function(t){return this.each((function(){var n=D(this,Be),i="object"==typeof t?t:null;if((n||!/dispose|hide/.test(t))&&(n||(n=new e(this,i),Z(this,Be,n)),"string"==typeof t)){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"Default",get:function(){return We}},{key:"NAME",get:function(){return Me}},{key:"DATA_KEY",get:function(){return Be}},{key:"Event",get:function(){return Ke}},{key:"EVENT_KEY",get:function(){return Re}},{key:"DefaultType",get:function(){return Fe}}]),e}(Pe);L((function(){var t=O();if(t){var e=t.fn.popover;t.fn.popover=Qe.jQueryInterface,t.fn.popover.Constructor=Qe,t.fn.popover.noConflict=function(){return t.fn.popover=e,Qe.jQueryInterface}}}));var Ue="scrollspy",Ye="bs.scrollspy",qe="."+Ye,ze={offset:10,method:"auto",target:""},Xe={offset:"number",method:"string",target:"(string|element)"},Ve="dropdown-item",$e="active",Ge=".nav-link",Je="position",tn=function(t){function e(e,n){var i;return(i=t.call(this,e)||this)._scrollElement="BODY"===e.tagName?window:e,i._config=i._getConfig(n),i._selector=i._config.target+" "+".nav-link, "+i._config.target+" "+".list-group-item, "+i._config.target+" ."+Ve,i._offsets=[],i._targets=[],i._activeTarget=null,i._scrollHeight=0,U.on(i._scrollElement,"scroll.bs.scrollspy",(function(t){return i._process(t)})),i.refresh(),i._process(),i}l(e,t);var n=e.prototype;return n.refresh=function(){var t=this,e=this._scrollElement===this._scrollElement.window?"offset":Je,n="auto"===this._config.method?e:this._config.method,i=n===Je?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),et.find(this._selector).map((function(t){var e=p(t),o=e?et.findOne(e):null;if(o){var r=o.getBoundingClientRect();if(r.width||r.height)return[tt[n](o).top+i,e]}return null})).filter((function(t){return t})).sort((function(t,e){return t[0]-e[0]})).forEach((function(e){t._offsets.push(e[0]),t._targets.push(e[1])}))},n.dispose=function(){t.prototype.dispose.call(this),U.off(this._scrollElement,qe),this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},n._getConfig=function(t){if("string"!=typeof(t=a({},ze,"object"==typeof t&&t?t:{})).target&&_(t.target)){var e=t.target.id;e||(e=d(Ue),t.target.id=e),t.target="#"+e}return y(Ue,t,Xe),t},n._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},n._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},n._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},n._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=n){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;){this._activeTarget!==this._targets[o]&&t>=this._offsets[o]&&(void 0===this._offsets[o+1]||t<this._offsets[o+1])&&this._activate(this._targets[o])}}},n._activate=function(t){this._activeTarget=t,this._clear();var e=this._selector.split(",").map((function(e){return e+'[data-bs-target="'+t+'"],'+e+'[href="'+t+'"]'})),n=et.findOne(e.join(","));n.classList.contains(Ve)?(et.findOne(".dropdown-toggle",n.closest(".dropdown")).classList.add($e),n.classList.add($e)):(n.classList.add($e),et.parents(n,".nav, .list-group").forEach((function(t){et.prev(t,".nav-link, .list-group-item").forEach((function(t){return t.classList.add($e)})),et.prev(t,".nav-item").forEach((function(t){et.children(t,Ge).forEach((function(t){return t.classList.add($e)}))}))}))),U.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:t})},n._clear=function(){et.find(this._selector).filter((function(t){return t.classList.contains($e)})).forEach((function(t){return t.classList.remove($e)}))},e.jQueryInterface=function(t){return this.each((function(){var n=D(this,Ye);if(n||(n=new e(this,"object"==typeof t&&t)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"Default",get:function(){return ze}},{key:"DATA_KEY",get:function(){return Ye}}]),e}(Y);U.on(window,"load.bs.scrollspy.data-api",(function(){et.find('[data-bs-spy="scroll"]').forEach((function(t){return new tn(t,tt.getDataAttributes(t))}))})),L((function(){var t=O();if(t){var e=t.fn[Ue];t.fn[Ue]=tn.jQueryInterface,t.fn[Ue].Constructor=tn,t.fn[Ue].noConflict=function(){return t.fn[Ue]=e,tn.jQueryInterface}}}));var en="bs.tab",nn="active",on="fade",rn="show",sn=".active",an=":scope > li > .active",ln=function(t){function e(){return t.apply(this,arguments)||this}l(e,t);var n=e.prototype;return n.show=function(){var t=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&this._element.classList.contains(nn)||this._element.classList.contains("disabled"))){var e,n=g(this._element),i=this._element.closest(".nav, .list-group");if(i){var o="UL"===i.nodeName||"OL"===i.nodeName?an:sn;e=(e=et.find(o,i))[e.length-1]}var r=null;if(e&&(r=U.trigger(e,"hide.bs.tab",{relatedTarget:this._element})),!(U.trigger(this._element,"show.bs.tab",{relatedTarget:e}).defaultPrevented||null!==r&&r.defaultPrevented)){this._activate(this._element,i);var s=function(){U.trigger(e,"hidden.bs.tab",{relatedTarget:t._element}),U.trigger(t._element,"shown.bs.tab",{relatedTarget:e})};n?this._activate(n,n.parentNode,s):s()}}},n._activate=function(t,e,n){var i=this,o=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?et.children(e,sn):et.find(an,e))[0],r=n&&o&&o.classList.contains(on),s=function(){return i._transitionComplete(t,o,n)};if(o&&r){var a=m(o);o.classList.remove(rn),U.one(o,f,s),b(o,a)}else s()},n._transitionComplete=function(t,e,n){if(e){e.classList.remove(nn);var i=et.findOne(":scope > .dropdown-menu .active",e.parentNode);i&&i.classList.remove(nn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}(t.classList.add(nn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),k(t),t.classList.contains(on)&&t.classList.add(rn),t.parentNode&&t.parentNode.classList.contains("dropdown-menu"))&&(t.closest(".dropdown")&&et.find(".dropdown-toggle").forEach((function(t){return t.classList.add(nn)})),t.setAttribute("aria-expanded",!0));n&&n()},e.jQueryInterface=function(t){return this.each((function(){var n=D(this,en)||new e(this);if("string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"DATA_KEY",get:function(){return en}}]),e}(Y);U.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(t){t.preventDefault(),(D(this,en)||new ln(this)).show()})),L((function(){var t=O();if(t){var e=t.fn.tab;t.fn.tab=ln.jQueryInterface,t.fn.tab.Constructor=ln,t.fn.tab.noConflict=function(){return t.fn.tab=e,ln.jQueryInterface}}}));var cn="toast",un="bs.toast",fn="click.dismiss.bs.toast",dn="hide",hn="show",pn="showing",gn={animation:"boolean",autohide:"boolean",delay:"number"},mn={animation:!0,autohide:!0,delay:5e3},vn=function(t){function e(e,n){var i;return(i=t.call(this,e)||this)._config=i._getConfig(n),i._timeout=null,i._setListeners(),i}l(e,t);var n=e.prototype;return n.show=function(){var t=this;if(!U.trigger(this._element,"show.bs.toast").defaultPrevented){this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");var e=function(){t._element.classList.remove(pn),t._element.classList.add(hn),U.trigger(t._element,"shown.bs.toast"),t._config.autohide&&(t._timeout=setTimeout((function(){t.hide()}),t._config.delay))};if(this._element.classList.remove(dn),k(this._element),this._element.classList.add(pn),this._config.animation){var n=m(this._element);U.one(this._element,f,e),b(this._element,n)}else e()}},n.hide=function(){var t=this;if(this._element.classList.contains(hn)&&!U.trigger(this._element,"hide.bs.toast").defaultPrevented){var e=function(){t._element.classList.add(dn),U.trigger(t._element,"hidden.bs.toast")};if(this._element.classList.remove(hn),this._config.animation){var n=m(this._element);U.one(this._element,f,e),b(this._element,n)}else e()}},n.dispose=function(){this._clearTimeout(),this._element.classList.contains(hn)&&this._element.classList.remove(hn),U.off(this._element,fn),t.prototype.dispose.call(this),this._config=null},n._getConfig=function(t){return t=a({},mn,tt.getDataAttributes(this._element),"object"==typeof t&&t?t:{}),y(cn,t,this.constructor.DefaultType),t},n._setListeners=function(){var t=this;U.on(this._element,fn,'[data-bs-dismiss="toast"]',(function(){return t.hide()}))},n._clearTimeout=function(){clearTimeout(this._timeout),this._timeout=null},e.jQueryInterface=function(t){return this.each((function(){var n=D(this,un);if(n||(n=new e(this,"object"==typeof t&&t)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t](this)}}))},s(e,null,[{key:"DefaultType",get:function(){return gn}},{key:"Default",get:function(){return mn}},{key:"DATA_KEY",get:function(){return un}}]),e}(Y);L((function(){var t=O();if(t){var e=t.fn.toast;t.fn.toast=vn.jQueryInterface,t.fn.toast.Constructor=vn,t.fn.toast.noConflict=function(){return t.fn.toast=e,vn.jQueryInterface}}}))},232:(t,e,n)=>{n(704),n(909)}},e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n(232)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,